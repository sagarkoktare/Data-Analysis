#----------------------------------------------
#---WINDOW FUNCTIONS
#----------------------------------------------
#CREATE A DATABASE
CREATE DATABASE WIN_FUN;
USE WIN_FUN;

#CREATE STUDENT TABLE
CREATE TABLE STUDENTS(
STUDENT_ID INT,
BATCH VARCHAR(40),
STUDENT_NAME VARCHAR(40),
STUDENT_STREAM VARCHAR(40),
STUDENT_MARKS INT,
STUDENT_EMAILID VARCHAR(40))

#INSERT DATA INTO TABLE
INSERT INTO STUDENTS VALUES(1001, 'MORNING', 'SAURABH', 'SCIENCE', 80, 'SAURABH@GMAIL.COM'),
(1002, 'MORNING', 'REHAN', 'COMMERCE', 45, 'REHAN@GMAIL.COM'),
(1003, 'MORNING', 'SACHIN', 'SCIENCE', 40, 'SACHIN@GMAIL.COM'),
(1004, 'EVENING', 'VIRAT', 'ARTS', 50, 'VIRAT@GMAIL.COM'),
(1005, 'MORNING', 'RISHABH', 'SCIENCE', 49, 'RISHABH@GMAIL.COM'),
(1006, 'AFTERNOON', 'SMITA', 'COMMERCE', 80, 'SMITA@GMAIL.COM'),
(1007, 'AFTERNOON', 'VEENA', 'SCIENCE', 56, 'VEENA@GMAIL.COM'),
(1008, 'MORNING', 'MARK', 'SCIENCE', 80, 'MARK@GMAIL.COM'),
(1009, 'AFTERNOON', 'PAULA', 'COMMERCE', 78, 'PAULA@GMAIL.COM'),
(1010, 'MORNING', 'PAUL', 'COMMERCE', 98, 'PAUL@GMAIL.COM'),
(1011, 'MORNING', 'ELON', 'COMMERCE', 89, 'ELON@GMAIL.COM'),
(1012, 'AFTERNOON', 'JEFF', 'ARTS', 75, 'JEFF@GMAIL.COM'),
(1013, 'MORNING', 'DEEPKAK', 'COMMERCE', 45, 'DEEPAK@GMAIL.COM'),
(1014, 'AFTERNOON', 'RANVEER', 'ARTS', 49, 'RANVEER@GMAIL.COM'),
(1015, 'MORNING', 'AJAY', 'SCIENCE', 58, 'AJAY@GMAIL.COM'),
(1016, 'MORNING', 'RISHI', 'ARTS', 69, 'RISHI@GMAIL.COM'),
(1017, 'EVENING', 'AMIT', 'COMMERCE', 63, 'AMIT@GMAIL.COM'),
(1018, 'MORNING', 'ANUP', 'ARTS', 96, 'ANUP@GMAIL.COM'),
(1019, 'MORNING', 'DENCY', 'COMMERCE', 71, 'DENCY@GMAIL.COM'),
(1020, 'MORNING', 'CLINTON', 'ARTS', 62, 'CLINTON@GMAIL.COM'),
(1021, 'EVENING', 'MIKE', 'COMMERCE', 54, 'MIKE@GMAIL.COM'),
(1022, 'EVENING', 'MAGGIE', 'SCIENCE', 92, 'MAGGIE@GMAIL.COM'),
(1023, 'EVENING', 'DESY', 'ARTS', 59, 'DESY@GMAIL.COM'),
(1024, 'EVENING', 'SUFI', 'SCIENCE', 68, 'SUFI@GMAIL.COM'),
(1025, 'MORNING', 'JIVA', 'ARTS', 68, 'JIVA@GMAIL.COM'),
(1026, 'EVENING', 'VYAS', 'COMMERCE', 54, 'VYAS@GMAIL.COM'),
(1027, 'MORNING', 'SHAILESH', 'SCIENCE', 80, 'SHAILESH@GMAIL.COM'),
(1028, 'EVENING', 'V', 'COMMERCE', 92, 'V@GMAIL.COM')

INSERT INTO STUDENTS VALUES(1029, 'MORNING', 'ARC', 'SCIENCE', 54, 'SHAILESH@GMAIL.COM'),
(1030, 'MORNING', 'SUDHIR', 'COMMERCE', 62, 'SUDHIR@GMAIL.COM'),
(1031, 'MORNING', 'FALCON', 'COMMERCE', 71, 'FALCON@GMAIL.COM')

#AGGREGATE WINDOW FUNCTIONS
SELECT STUDENT_STREAM, AVG(STUDENT_MARKS) AS 'AVG', MIN(STUDENT_MARKS) AS 'MIN', MAX(STUDENT_MARKS) AS 'MAX',SUM(STUDENT_MARKS) AS 'TOTAL' FROM STUDENTS GROUP BY STUDENT_STREAM ORDER BY BATCH;

SELECT COUNT(STUDENT_STREAM) FROM STUDENTS;

SELECT COUNT(distinct STUDENT_STREAM) FROM STUDENTS;

#TOTAL NUMBER OF RESPONDENTS BY STREAM
SELECT STUDENT_STREAM, COUNT(*) FROM STUDENTS GROUP BY STUDENT_STREAM;

#ANALYTICAL WINDOW FUNCTIONS

SELECT * FROM STUDENTS ORDER BY STUDENT_MARKS DESC;

#ROW NUMBER
SELECT *, ROW_NUMBER() OVER(ORDER BY STUDENT_MARKS) AS 'ROW NUMBER' FROM STUDENTS ORDER BY STUDENT_MARKS;

#PARTIION BY BATCH BY HIGHEST TO LOWEST MARKS
SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW NUMBER' FROM STUDENTS
ORDER BY STUDENT_MARKS DESC;

#HIGHTEST MARKS STUDENTS FROM EACH BATCH
SELECT * FROM 
(SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW_NUM' FROM STUDENTS
ORDER BY STUDENT_MARKS DESC) AS TEST WHERE ROW_NUM = 1;

#HIGHTEST MARKS STUDENTS FROM EACH STREAM
SELECT * FROM 
(SELECT *, ROW_NUMBER() OVER(PARTITION BY STUDENT_STREAM ORDER BY STUDENT_MARKS DESC) AS 'ROW_NUM' FROM STUDENTS
ORDER BY STUDENT_MARKS DESC) AS TEST WHERE ROW_NUM = 1;


#DRAW BACK IS - SAME MARKS DOESN'T HAVE SAME ROW NUMBER

#------------------------------------------------------------------------------------------------------------
#------ RANK
#------------------------------------------------------------------------------------------------------------

SELECT *, ROW_NUMBER() OVER(ORDER BY STUDENT_MARKS) AS 'ROW NUMBER',
RANK() OVER(ORDER BY STUDENT_MARKS) AS 'RANK' FROM STUDENTS ORDER BY STUDENT_MARKS;

SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW NUMBER',
RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'RANK' FROM STUDENTS ORDER BY STUDENT_MARKS DESC;

SELECT * FROM (
SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW NUMBER',
RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'RANK_' FROM STUDENTS ORDER BY STUDENT_MARKS DESC)
AS TEST WHERE RANK_= 1;

# WE ARE GETTING 2 STUDENTS FROM EVENING BATCH WHO HAS SAME MARKS

#DRAW BACK IS - SAME MARKS HAVE SAME RANK

#DENSE RANK
SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW NUMBER',
RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'RANK_',
DENSE_RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'DENSE_RANK_'
FROM STUDENTS ORDER BY STUDENT_MARKS DESC;

#FINDING A 2ND HIGHEST FROM EACH BATCH
SELECT * FROM(
SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW NUMBER',
RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'RANK_',
DENSE_RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'DENSE_RANK_'
FROM STUDENTS ORDER BY STUDENT_MARKS DESC) AS T1 WHERE DENSE_RANK_ = 2;

#HIGHEST FROM EACH BATCH 
SELECT * FROM(
SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW NUMBER',
RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'RANK_',
DENSE_RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'DENSE_RANK_'
FROM STUDENTS ORDER BY STUDENT_MARKS DESC) AS T1 WHERE DENSE_RANK_ = 1;

SELECT * FROM(
SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW NUMBER',
RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'RANK_',
DENSE_RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'DENSE_RANK_'
FROM STUDENTS ORDER BY STUDENT_MARKS DESC) AS T1 WHERE DENSE_RANK_ <= 3;

SELECT * FROM(
SELECT *, ROW_NUMBER() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'ROW NUMBER',
RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'RANK_',
DENSE_RANK() OVER(PARTITION BY BATCH ORDER BY STUDENT_MARKS DESC) AS 'DENSE_RANK_'
FROM STUDENTS ORDER BY STUDENT_MARKS DESC) AS T1 WHERE DENSE_RANK_ IN (1,2,3);




