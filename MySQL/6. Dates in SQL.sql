CREATE DATABASE SALES_DB;
USE SALES_DB;

DROP TABLE SALES;

#CREATING TABLE
CREATE TABLE if not exists SALES(
	order_id VARCHAR(15) NOT NULL, 
	order_date VARCHAR(15) NOT NULL, 
	ship_date VARCHAR(15) NOT NULL, 
	ship_mode VARCHAR(14) NOT NULL, 
	customer_name VARCHAR(22) NOT NULL, 
	segment VARCHAR(11) NOT NULL, 
	state VARCHAR(36) NOT NULL, 
	country VARCHAR(32) NOT NULL, 
	market VARCHAR(6) NOT NULL, 
	region VARCHAR(14) NOT NULL, 
	product_id VARCHAR(16) NOT NULL, 
	category VARCHAR(15) NOT NULL, 
	sub_category VARCHAR(11) NOT NULL, 
	product_name VARCHAR(127) NOT NULL, 
	sales DECIMAL(38, 0) NOT NULL, 
	quantity DECIMAL(38, 0) NOT NULL, 
	discount DECIMAL(38, 3) NOT NULL, 
	profit DECIMAL(38, 8) NOT NULL, 
	shipping_cost DECIMAL(38, 2) NOT NULL, 
	order_priority VARCHAR(8) NOT NULL, 
	`year` DECIMAL(38, 0) NOT NULL
);

#Load data in SQL using Bulk Mode

SET SESSION Sql_mode = ''
LOAD DATA infile
'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/sales_data_final.csv'
INTO TABLE SALES
FIELDS terminated by ','
enclosed by '"'
lines terminated by '\n'
IGNORE 1 ROWS;

#VIEW ALL DATA
SELECT * FROM SALES;

# TOTAL NUMBER OF OBSERVATIONS
SELECT COUNT(*) FROM SALES;

#STRING TO DATE FORMAT USING str_to_date
SELECT str_to_date(order_date,'%m-%d-%Y') from sales;

#ADD NEW COLUMN INTO TABLE
ALTER TABLE sales
ADD COLUMN ORDER_DATE_NEW DATE AFTER ORDER_DATE;

# UPDATING NEW COLUMN
UPDATE SALES
SET ORDER_DATE_NEW = str_to_date(order_date,'%m-%d-%Y');

#FINDING DATA TYPE OF EACH COLUMN
SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'sales_db' AND TABLE_NAME = 'SALES';

#SET SQL_SET_UPDATES = 0

#ADD NEW COLUMN INTO TABLE
ALTER TABLE SALES
ADD COLUMN SHIP_DATE_NEW DATE AFTER SHIP_DATE;

# UPDATING NEW COLUMN
UPDATE SALES
SET SHIP_DATE_NEW = str_to_date(ship_date,'%m-%d-%Y');

SELECT * FROM SALES WHERE ORDER_DATE_NEW = '2011-01-04';

SELECT * FROM SALES WHERE ORDER_DATE_NEW > '2011-01-04';
SELECT * FROM SALES WHERE ORDER_DATE_NEW < '2011-01-04';

#FILTERING SALES BASED ON MONTH PROVIDED
SELECT COUNT(*) FROM SALES WHERE ORDER_DATE_NEW >= '2011-01-01' AND ORDER_DATE_NEW <= '2011-08-31';

#USING BETWEEN CLAUSE
SELECT COUNT(*) FROM SALES WHERE ORDER_DATE_NEW BETWEEN '2011-01-01' AND '2011-08-31';

#SELECT CURRENT DATE AND TIME
SELECT NOW();

#SELECT CURRENT TIME
SELECT CURTIME();

#SELECT CURRENT DATE
SELECT CURDATE(),CURTIME();

SELECT * FROM SALES WHERE SHIP_DATE_NEW < date_sub(now(), INTERVAL 1 WEEK)

#SUBTRACTING DATE BY WEEK | MOTH | YEAR | DAY
SELECT date_sub(now(), INTERVAL 1 WEEK);
SELECT date_sub(now(), INTERVAL 1 MONTH);
SELECT date_sub(now(), INTERVAL 1 YEAR);
SELECT date_sub(now(), INTERVAL 1 DAY) ;

#GET YEAR 
SELECT YEAR(NOW());

#GET DAY NAME
SELECT DAYNAME(NOW());

#GET DAY NAME BY DATE
SELECT DAYNAME('1992-08-07 19:00:00');

#ADD CURRENT DATE
ALTER TABLE SALES
ADD COLUMN CURR_TIME DATE AFTER ORDER_ID;

#ADD CURRENT DATE
UPDATE SALES SET CURR_TIME = NOW();

#UPDATE YEAR COLUMN WITH CURRENT YEAR

#MODIFYING DATA TYPE OF YEAR COLUMN
ALTER table SALES
MODIFY COLUMN YEAR DATETIME;

#MODIFYING MONTH, YEAR & DAY COLUMN

#adding columns 
ALTER TABLE SALES modify COLUMN DAY_NEW int AFTER ORDER_ID;
ALTER TABLE SALES MODIFY COLUMN MONTH_NEW int AFTER ORDER_ID;
ALTER TABLE SALES MODIFY COLUMN YEAR_NEW int AFTER ORDER_ID;

#UPDATING COLUMNS
UPDATE SALES SET YEAR_NEW = YEAR(ORDER_DATE_NEW);
UPDATE SALES SET MONTH_NEW = month(ORDER_DATE_new);
UPDATE SALES SET DAY_NEW = DAY(ORDER_DATE_new);

#AVG SALES | YEARWISE
SELECT YEAR_NEW, AVG(SALES) FROM SALES GROUP BY YEAR_NEW;

#SUM | MIN | MAX | QUANTIY | SALES | YEARWISE
SELECT YEAR_NEW, SUM(SALES) AS 'SALES',SUM(QUANTITY) 'QUANTIY',SUM(PROFIT) AS 'PROFIT',SUM(DISCOUNT) AS 'DISCOUNT' FROM SALES GROUP BY YEAR_NEW;

SELECT YEAR_NEW, SUM(SALES) AS 'SALES', SUM(QUANTITY) AS 'QTY', SUM(PROFIT) AS 'PROFIT',
SUM(DISCOUNT)  AS 'DISCOUNT', SUM(DISCOUNT+SHIPPING_COST) AS 'CTC' FROM SALES GROUP BY YEAR_NEW;

SELECT YEAR_NEW, DISCOUNT ,SHIPPING_COST, (DISCOUNT+SHIPPING_COST) FROM SALES;

#CREATING FLAG
SELECT ORDER_ID, (SHIPPING_COST * DISCOUNT) AS 'DISCOUNT AMOUNT', DISCOUNT, IF(DISCOUNT > 0, 'YES', 'NO') AS 'DISCOUNT_FLAG' FROM SALES;

#ADDING DISCOUNT FLAG COLUMN 
ALTER TABLE SALES ADD COLUMN DISCOUNT_FLAG VARCHAR(30) AFTER DISCOUNT;

#UPDATING DISCOUNT FLAG COLUMN 
UPDATE SALES SET DISCOUNT_FLAG = IF(DISCOUNT > 0, 'YES', 'NO');

#FINDING OUT DISCOUNT ORDERS AND WITHOUT DISCOUNT ORDERS
SELECT DISCOUNT_FLAG, COUNT(DISCOUNT_FLAG) FROM SALES GROUP BY DISCOUNT_FLAG;

SELECT * FROM SALES;
